package org.eclipse.ui.externaltools.internal.ui;/**********************************************************************Copyright (c) 2002 IBM Corp. and others.All rights reserved.   This program and the accompanying materialsare made available under the terms of the Common Public License v0.5which accompanies this distribution, and is available athttp://www.eclipse.org/legal/cpl-v05.html Contributors:**********************************************************************/import org.eclipse.jface.preference.*;import org.eclipse.swt.SWT;import org.eclipse.swt.graphics.*;import org.eclipse.swt.graphics.FontData;import org.eclipse.swt.widgets.*;import org.eclipse.swt.widgets.Composite;import org.eclipse.ui.*;import org.eclipse.ui.externaltools.internal.core.*;public class ToolsPreferencePage extends FieldEditorPreferencePage implements IWorkbenchPreferencePage {	public ToolsPreferencePage() {		super(GRID);		IPreferenceStore store =			ExternalToolsPlugin.getDefault().getPreferenceStore();		setPreferenceStore(store);	}	public void createControl(Composite parent) {		super.createControl(parent);		// should do something here with the help..			/* FIXME		WorkbenchHelp.setHelp(			parent,			new Object[] { IAntHelpContextIds.ANT_PREFERENCE_PAGE });		*/	}	/**	 * @see FieldEditorPreferencePage#createFieldEditors	 */	protected void createFieldEditors() {			BooleanFieldEditor autoSave =				new BooleanFieldEditor(					IPreferenceConstants.AUTO_SAVE,					ToolMessages.getString(						"ToolsPreferencePage.savePriorToBuilding"), // $NON-NLS-1$	SWT.NONE, getFieldEditorParent());			RadioGroupFieldEditor outputLevel =				new RadioGroupFieldEditor(					IPreferenceConstants.OUPUT_LEVEL,					ToolMessages.getString(						"ToolsPreferencePage.preferedOutputLevel"), // $NON-NLS-1$	1,		new String[][] {			{				ToolMessages.getString("ToolsPreferencePage.info"), // $NON-NLS-1$				IPreferenceConstants.INFO_LEVEL },			{				ToolMessages.getString("ToolsPreferencePage.verbose"), // $NON-NLS-1$					IPreferenceConstants.VERBOSE_LEVEL },			{				ToolMessages.getString("ToolsPreferencePage.debug"), // $NON-NLS-1$					IPreferenceConstants.DEBUG_LEVEL }		}, getFieldEditorParent(), true);		addField(autoSave);		addField(outputLevel);		ColorFieldEditor errOut =			new ColorFieldEditor(				IPreferenceConstants.CONSOLE_ERROR_RGB,				ToolMessages.getString("ToolsPreferencePage.errorColor"), // $NON-NLS-1$				getFieldEditorParent());		ColorFieldEditor warnOut =			new ColorFieldEditor(				IPreferenceConstants.CONSOLE_WARNING_RGB,				ToolMessages.getString("ToolsPreferencePage.warningColor"), // $NON-NLS-1$				getFieldEditorParent());		ColorFieldEditor infoOut =			new ColorFieldEditor(				IPreferenceConstants.CONSOLE_INFO_RGB,				ToolMessages.getString("ToolsPreferencePage.infoColor"), // $NON-NLS-1$				getFieldEditorParent());		ColorFieldEditor verbOut =			new ColorFieldEditor(				IPreferenceConstants.CONSOLE_VERBOSE_RGB,				ToolMessages.getString("ToolsPreferencePage.verboseColor"), // $NON-NLS-1$				getFieldEditorParent());		ColorFieldEditor debugOut =			new ColorFieldEditor(				IPreferenceConstants.CONSOLE_DEBUG_RGB,				ToolMessages.getString("ToolsPreferencePage.debugColor"), // $NON-NLS-1$				getFieldEditorParent());		FontFieldEditor font =			new FontFieldEditor(				IPreferenceConstants.CONSOLE_FONT,				ToolMessages.getString("ToolsPreferencePage.font"), // $NON-NLS-1$				getFieldEditorParent());		addField(errOut);		addField(warnOut);		addField(infoOut);		addField(verbOut);		addField(debugOut);		addField(font);	}	/**	 * Returns the font data that describes the font to use for the console	 */	protected static FontData getConsoleFontData() {		IPreferenceStore pstore= ExternalToolsPlugin.getDefault().getPreferenceStore();		FontData fontData= PreferenceConverter.getFontData(pstore, IPreferenceConstants.CONSOLE_FONT);		return fontData;	}	/**	 * Returns the a color based on the type.	 */	protected static Color getPreferenceColor(String type) {		IPreferenceStore pstore= ExternalToolsPlugin.getDefault().getPreferenceStore();		RGB outRGB= PreferenceConverter.getColor(pstore, type);		return new Color(Display.getCurrent() ,outRGB);	}	/**	 * @see IWorkbenchPreferencePage#init	 */	public void init(IWorkbench workbench) {	}}